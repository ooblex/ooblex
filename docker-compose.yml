version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Video Decoder Service
  decoder:
    build:
      context: ./services/decoder
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/decoder:/app
    command: python -m decoder

  # ML Worker Service
  ml-worker:
    build:
      context: ./services/ml-worker
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      MODEL_PATH: /models
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/ml-worker:/app
      - ./models:/models:ro
      - ml_cache:/cache
    command: python -m ml_worker

  # MJPEG Streaming Service
  mjpeg:
    build:
      context: ./services/mjpeg
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
    volumes:
      - ./services/mjpeg:/app
    command: python -m mjpeg_server

  # Nginx Reverse Proxy (simplified)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./html:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mjpeg
      - decoder
      - ml-worker
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  rabbitmq_data:
  ml_cache:

networks:
  default:
    driver: bridge