version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for persistent data (replacing file-based storage)
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ooblex}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ooblex}
      POSTGRES_DB: ${POSTGRES_DB:-ooblex}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ooblex}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8800:8800"
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRES_USER:-ooblex}:${POSTGRES_PASSWORD:-ooblex}@postgres:5432/${POSTGRES_DB:-ooblex}
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
      - postgres
    volumes:
      - ./services/api:/app
      - ./ssl:/ssl:ro
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8800 --reload

  # WebRTC Gateway Service
  webrtc:
    build:
      context: ./services/webrtc
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8100:8100"
      - "10000-10100:10000-10100/udp"
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      JANUS_PATH: ${JANUS_PATH:-/opt/janus}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/webrtc:/app
      - ./ssl:/ssl:ro
      - janus_recordings:/recordings
    command: python -m webrtc_gateway

  # ML Worker Service (Brain)
  ml-worker:
    build:
      context: ./services/ml-worker
      dockerfile: Dockerfile
    restart: unless-stopped
    deploy:
      replicas: ${ML_WORKER_REPLICAS:-2}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      MODEL_PATH: /models
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-0}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      TF_CPP_MIN_LOG_LEVEL: ${TF_CPP_MIN_LOG_LEVEL:-2}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/ml-worker:/app
      - ./models:/models:ro
      - ml_cache:/cache
    command: python -m ml_worker

  # Video Decoder Service
  decoder:
    build:
      context: ./services/decoder
      dockerfile: Dockerfile
    restart: unless-stopped
    deploy:
      replicas: ${DECODER_REPLICAS:-2}
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      GSTREAMER_PATH: ${GSTREAMER_PATH:-/usr/lib/x86_64-linux-gnu/gstreamer-1.0}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/decoder:/app
    command: python -m decoder

  # MJPEG Streaming Service
  mjpeg:
    build:
      context: ./services/mjpeg
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
    volumes:
      - ./services/mjpeg:/app
    command: python -m mjpeg_server

  # Media Server (SFU/MCU)
  media-server:
    build:
      context: ./services/media-server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
      - "20000-20100:20000-20100/udp"
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      WHIP_ENDPOINT: http://whip-server:8080
      WHEP_ENDPOINT: http://whep-server:8080
      VDO_NINJA_URL: http://vdo-bridge:8080
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/media-server:/app
      - media_recordings:/app/recordings
    command: python -u media_server.py

  # HLS/DASH Streaming Server
  streaming:
    build:
      context: ./services/streaming
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      REDIS_URL: redis://redis:6379
      MEDIA_SERVER_URL: http://media-server:8080
      OUTPUT_DIR: /var/www/streams
      SEGMENT_DURATION: ${SEGMENT_DURATION:-2}
      PLAYLIST_SIZE: ${PLAYLIST_SIZE:-10}
      LOW_LATENCY_HLS: ${LOW_LATENCY_HLS:-true}
      CLEANUP_INTERVAL: ${CLEANUP_INTERVAL:-300}
      STALE_THRESHOLD: ${STALE_THRESHOLD:-600}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - media-server
    volumes:
      - ./services/streaming:/app
      - streaming_data:/var/www/streams
    command: python -m uvicorn streaming_server:app --host 0.0.0.0 --port 8083

  # Blockchain Service for content verification
  blockchain:
    build:
      context: ./services/blockchain
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8085:8080"
      - "5001:5001"  # IPFS API
      - "4001:4001"  # IPFS Swarm
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRES_USER:-ooblex}:${POSTGRES_PASSWORD:-ooblex}@postgres:5432/${POSTGRES_DB:-ooblex}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL:-https://mainnet.infura.io/v3/YOUR_PROJECT_ID}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL:-https://polygon-rpc.com}
      AVALANCHE_RPC_URL: ${AVALANCHE_RPC_URL:-https://api.avax.network/ext/bc/C/rpc}
      ARBITRUM_RPC_URL: ${ARBITRUM_RPC_URL:-https://arb1.arbitrum.io/rpc}
      OPTIMISM_RPC_URL: ${OPTIMISM_RPC_URL:-https://mainnet.optimism.io}
      BSC_RPC_URL: ${BSC_RPC_URL:-https://bsc-dataseed.binance.org/}
      PINATA_API_KEY: ${PINATA_API_KEY}
      INFURA_PROJECT_ID: ${INFURA_PROJECT_ID}
      INFURA_PROJECT_SECRET: ${INFURA_PROJECT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - redis
      - rabbitmq
      - postgres
    volumes:
      - ./services/blockchain:/app
      - blockchain_data:/data
      - ipfs_data:/data/ipfs
    command: python -m blockchain_service
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS Node (optional, for local IPFS)
  ipfs:
    image: ipfs/kubo:latest
    restart: unless-stopped
    ports:
      - "8086:8080"  # IPFS Gateway
      - "5002:5001"  # IPFS API (alternative port)
      - "4002:4001"  # IPFS Swarm (alternative port)
    environment:
      IPFS_PROFILE: server
    volumes:
      - ipfs_node_data:/data/ipfs
    command: daemon --migrate=true --enable-gc

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8084:8084"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./html:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - streaming_data:/var/www/streams:ro
    depends_on:
      - api
      - webrtc
      - mjpeg
      - media-server
      - streaming
      - blockchain
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

volumes:
  redis_data:
  rabbitmq_data:
  postgres_data:
  janus_recordings:
  ml_cache:
  nginx_cache:
  prometheus_data:
  grafana_data:
  media_recordings:
  streaming_data:
  blockchain_data:
  ipfs_data:
  ipfs_node_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16