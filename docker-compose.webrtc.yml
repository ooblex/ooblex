version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  webrtc-server:
    build:
      context: ./services/webrtc
      dockerfile: Dockerfile
    ports:
      - "8443:8443"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./ssl:/app/ssl:ro
      - ./services/webrtc:/app
    depends_on:
      redis:
        condition: service_healthy
    command: python webrtc_server.py

  ml-worker-1:
    build:
      context: ./services/ml-worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - ML_WORKER_COUNT=2
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models:ro
      - ./services/ml-worker:/app
    depends_on:
      redis:
        condition: service_healthy
    command: python ml_worker_parallel.py
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  ml-worker-2:
    build:
      context: ./services/ml-worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - ML_WORKER_COUNT=2
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models:ro
      - ./services/ml-worker:/app
    depends_on:
      redis:
        condition: service_healthy
    command: python ml_worker_parallel.py
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  ml-worker-3:
    build:
      context: ./services/ml-worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - ML_WORKER_COUNT=2
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models:ro
      - ./services/ml-worker:/app
    depends_on:
      redis:
        condition: service_healthy
    command: python ml_worker_parallel.py
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./html:/usr/share/nginx/html:ro
      - ./nginx/webrtc.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - webrtc-server

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-webrtc.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

volumes:
  redis_data:
  prometheus_data:
  grafana_data: